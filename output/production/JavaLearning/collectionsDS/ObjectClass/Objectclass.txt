The 11 methods in object class are :
public String toString() 
public native int hashCode()
public boolean equals(Object o) 
protected native Object clone() throws CloneNotSupportedException 
protected void finalize() throws Throwable 
public final Class getClass() 
public final void wait() throws InterruptedException 
public final native void wait(long ms) throws InterruptedException 
public final void wait(long ms, int ns) throws InterruptedException 
public native final void notify() 
public native final void notifyall()  


toString()
    -> whenever we are trying to print object reference, internally toString() will be called
    eg: Student s = new Student();
        sopln(s); -----> sopln(s.toString());

    -> if our class, doesnot contain toString(), then Object class toString() will be executed 
        (ObjectClassDSoft.java )
    -> in the wrapper classes, the toString() method is overridden to get proper content output
    -> in all collection classes,String and String buffer classes, toString() is overridden for meaningful string representation
    -> if we override the toString() method, which method whether its our class method / object class method 
    is determined at runtime

hashCode()
    -> this is NOT address of object(not possible to find this or size of objectin java)
    -> for every object a unique no. is generated by JVM  :  hashCode
    -> best search operation 
        -> linear search :  O(n) 
        -> binary search :  O(log n)
        -> hashCode : during search, checks only for the objects hashCode bucket having this value 
    
    -> if we call Object class hashCode(), it uses address of object and return hashCode, 
        that doesnot mean it return address of the object 
    -> based on our requirement we can override hashCode() to generate our own hashCode 
    
    diff between toString() vs hashCode()
        -> if we are giving the chance to Object class toString() method it internally calls hashCode() 
        -> if we are overriding toString(), then our toString() maynot call hashCode() 

equals 
    -> used to check equality of 2 objects : obj1.equals(obj2) 
    -> if our class doesnot contain equals(), then Object class equals() will be executed 
    -> == is for referece comparison    
        Object class .equals() is for referece comparison
        int == is for comparison, as this is primitive datatype we cannot use .equals()
        String class .equals() is overriden for content comparison
        Stringbuffer class .equals() is not overriden, hence object class is called 
            -> String s1 = new String("abc")
            String s2 = new String("abc")
            sop(s1 == s2)  --->  false
            sop(s1.equals(s2)) -----> true 

            Stringbuffer sb1 = new String("abc")
            Stringbuffer sb2 = new String("abc")
            sop(sb1 == sb2) --> false 
            sop(sb1.equals(sb2)) ---> false; as Object class .eqals is for referece comparision       
    -> based on our requirement we can override equals() for content comparison only 




